"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ws_1 = __importDefault(require("ws"));
const cors_1 = __importDefault(require("cors"));
const express_1 = __importDefault(require("express"));
const app = (0, express_1.default)();
app.use((0, cors_1.default)());
app.use(express_1.default.json());
app.use(express_1.default.urlencoded({ extended: true }));
const port = 6214;
const connections = {};
function isValidWebSocketURL(url) {
    return url.startsWith("wss://");
}
function generateUUID() {
    return Math.random().toString(36).substring(2, 10);
}
function handleWebSocketConnection(UUID, socket) {
    socket.on('message', (message) => {
        if (connections[UUID]) {
            const messageString = message.toString();
            connections[UUID].messages.push({
                id: generateUUID(),
                message: messageString,
                step: connections[UUID].messages.length + 1
            });
        }
    });
    socket.on('error', (error) => {
        console.error(`WebSocket error for UUID: ${UUID}`, error);
        if (connections[UUID]) {
            connections[UUID].errors.push({
                id: generateUUID(),
                message: error,
                step: connections[UUID].errors.length + 1
            });
        }
    });
}
app.post('/connect', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { Socket } = req.body;
    if (!Socket) {
        return res.status(400).json({ success: false, error: "No WebSocket URL provided!" });
    }
    if (!isValidWebSocketURL(Socket)) {
        return res.status(400).json({ success: false, error: "Invalid WebSocket URL" });
    }
    const UUID = generateUUID();
    const socket = new ws_1.default(Socket);
    try {
        yield new Promise((resolve, reject) => {
            socket.on('error', (error) => {
                console.error(`WebSocket error for UUID: ${UUID}`, error);
                reject(error);
            });
            socket.on('open', () => {
                resolve({});
            });
        });
    }
    catch (error) {
        return res.status(500).json({ success: false, error: "WebSocket connection error" });
    }
    connections[UUID] = { socket: socket, messages: [] };
    handleWebSocketConnection(UUID, socket);
    res.json({ UUID, Socket, success: true });
    return;
}));
app.post('/disconnect', (req, res) => {
    const { UUID } = req.body;
    if (!UUID) {
        return res.status(400).json({ success: false, error: "No UUID provided!" });
    }
    if (!connections[UUID]) {
        return res.status(404).json({ success: false, error: "UUID not found" });
    }
    connections[UUID].socket.close();
    delete connections[UUID];
    res.json({ UUID, success: true });
    return;
});
app.post('/send', (req, res) => {
    const { UUID, Message } = req.body;
    if (!UUID || !Message) {
        return res.status(400).json({ success: false, error: "UUID or Message not provided!" });
    }
    if (!connections[UUID] || connections[UUID].socket.readyState !== ws_1.default.OPEN) {
        return res.status(404).json({ success: false, error: "Invalid UUID or WebSocket connection closed" });
    }
    connections[UUID].socket.send(Message);
    res.json(true);
    return;
});
app.post('/get', (req, res) => {
    const { UUID } = req.body;
    if (!UUID) {
        return res.status(400).json({ success: false, error: "No UUID provided!" });
    }
    if (!connections[UUID]) {
        return res.status(404).json({ success: false, error: "Invalid UUID" });
    }
    res.json(connections[UUID].messages);
    return;
});
app.post('/errors', (req, res) => {
    const { UUID } = req.body;
    if (!UUID) {
        return res.status(400).json({ success: false, error: "No UUID provided!" });
    }
    if (!connections[UUID]) {
        return res.status(404).json({ success: false, error: "Invalid UUID" });
    }
    res.json(connections[UUID].errors);
    return;
});
app.listen(port, () => {
    console.log(`Server running on port ${port}`);
});
exports.default = app;
//# sourceMappingURL=data:application/json;base64,